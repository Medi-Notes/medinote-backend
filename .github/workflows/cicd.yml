name: Build and Deploy on EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      -   name: Checkout
          uses: actions/checkout@v4

      -   name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            java-version: "17"
            distribution: "corretto"

#      -   name: Configure AWS credentials
#          uses: aws-actions/configure-aws-credentials@v1
#          with:
#            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
#            aws-region: ap-northeast-2

      -   name: Cache Gradle
          uses: actions/cache@v3
          with:
            path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
              ${{ runner.os }}-gradle-

      -   name: Grant execute permission for gradlew
          run: chmod +x gradlew

      -   name: Build with Gradle
          run: ./gradlew build -x test


  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/medinote-server:prod-${{ github.sha }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.RELEASE_SERVER_IP }}
          username: ${{ secrets.RELEASE_SERVER_USER }}
          key: ${{ secrets.RELEASE_SERVER_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/medinote-server:prod-${{ github.sha }}
            docker stop medinote-server || true
            docker rm medinote-server || true
            docker run -d --name medinote-server \
              -e SPRING_PROFILES_ACTIVE=prod \
              -p 8080:8080 \
              --memory="512m" \
              --memory-swap="1638m" \
              --network medinote-network \
              ${{ secrets.DOCKERHUB_USERNAME }}/medinote-server:prod-${{ github.sha }}
            sudo docker system prune -af